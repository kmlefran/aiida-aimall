"""
Sphinx configuration for aiida-aimall

This file is execfile()d with the current directory set to its
containing dir.

Note that not all possible configuration values are present in this
autogenerated file.

All configuration values have a default; values that are commented out
serve to show the default.

"""
import os
import pathlib
import sys
import time

from aiida.manage.configuration import Profile, load_profile

import aiida_aimall

# from aiida.manage.configuration import load_documentation_profile
load_profile(Profile("docs", {"process_control": {}, "storage": {}}))

# -- AiiDA-related setup --------------------------------------------------

# Load the dummy documentation profile
# load_documentation_profile()

# -- General configuration ------------------------------------------------


# General information about the project.
project = "aiida-aimall"
author = "Kevin Lefrancois-Gagnon, Robert Mawhinney"
copyright_first_year = "2023"
copyright_owners = "Kevin Lefrancois-Gagnon, Robert Mawhinney"

current_year = str(time.localtime().tm_year)
copyright_year_string = (
    current_year
    if current_year == copyright_first_year
    else f"{copyright_first_year}-{current_year}"
)
# pylint: disable=redefined-builtin
copyright = f"{copyright_year_string}, {copyright_owners}. All rights reserved"

# The version info for the project you're documenting, acts as replacement for
# |version| and |release|, also used in various other places throughout the
# built documents.
#
# If extensions (or modules to document with autodoc) are in another directory,
# add these directories to sys.path here. If the directory is relative to the
# documentation root, use os.path.abspath to make it absolute, like shown here.

# Add any Sphinx extension module names here, as strings. They can be
# extensions coming with Sphinx (named 'sphinx.ext.*') or your custom
# ones.
extensions = [
    # "sphinx.ext.autodoc",
    "sphinx.ext.mathjax",
    "sphinx.ext.intersphinx",
    "sphinx.ext.viewcode",
    "sphinx_copybutton",
    "sphinx_click.ext",
    "sphinx_design",
    "myst_parser",
    "aiida.sphinxext",
    "autoapi.extension",
    "sphinxcontrib.contentui",
    "nbsphinx",
    "sphinx.ext.napoleon",
    "sphinx_gallery.load_style",
]

# Setting the intersphinx mapping to other readthedocss
intersphinx_mapping = {
    "python": ("https://docs.python.org/3", None),
    "aiida": ("https://aiida.readthedocs.io/projects/aiida-core/en/latest", None),
    "subproptools": ("https://subproptools.readthedocs.io/en/latest/", None),
}

# settings for the autoapi.extension automatically generating API docs
filepath_docs = pathlib.Path(__file__).parent.parent
filepath_src = filepath_docs.parent / "src"
autoapi_type = "python"
autoapi_ignore = ["*tests*"]
autoapi_dirs = [filepath_src]
autoapi_root = str(filepath_docs / "source" / "reference" / "api" / "auto")
autoapi_keep_files = True
autoapi_add_toctree_entry = False


# Settings for the `sphinx_copybutton` extension
copybutton_selector = "div:not(.no-copy)>div.highlight pre"
copybutton_prompt_text = (
    r">>> |\.\.\. |(?:\(.*\) )?\$ |In \[\d*\]: | {2,5}\.\.\.: | {5,8}: "
)
copybutton_prompt_is_regexp = True

# Add any paths that contain templates here, relative to this directory.
templates_path = ["_templates"]

# The language for content autogenerated by Sphinx. Refer to documentation
# for a list of supported languages.
#
# This is also used if you do content translation via gettext catalogs.
# Usually you set "language" from the command line for these cases.
language = "en"

# List of patterns, relative to source directory, that match files and
# directories to ignore when looking for source files.
exclude_patterns = [
    "**.ipynb_checkpoints"
]  # , 'reference/api/auto/aiida_aimall/index.rst'

# -- MyST options
myst_enable_extensions = [
    "deflist",
    "colon_fence",
    "substitution",
    "attrs_inline",
    "substitution",
]

myst_substitutions = {
    "aiida_logo": '<img src="../_static/logo_aiida.svg" alt="aiida" class="aiida-logo">',
    "AimqbCalculation": "{class}`~aiida_aimall.calculations.AimqbCalculation`",
    "AimqbParameters": "{class}`~aiida_aimall.data.AimqbParameters`",
}
# The suffix of source filenames.
sys.path.insert(0, os.path.abspath("../.."))
sys.path.insert(0, pathlib.Path(__file__).parents[2].resolve().as_posix())
source_suffix = ".rst"

# The encoding of source files.
# source_encoding = 'utf-8-sig'

# There are two options for replacing |today|: either, you set today to some
# non-false value, then it is used:
# today = ''
# Else, today_fmt is used as the format for a strftime call.
# today_fmt = '%B %d, %Y'

# List of patterns, relative to source directory, that match files and
# directories to ignore when looking for source files.
# exclude_patterns = ['doc.rst']
# ~ exclude_patterns = ['index.rst']

# -- Options for HTML output ----------------------------------------------

html_theme = "sphinx_book_theme"
html_theme_options = {
    "repository_url": "https://github.com/kmlefran/aiida-aimall",
    "github_url": "https://github.com/kmlefran/aiida-aimall",
    "use_edit_page_button": True,
    "navigation_with_keys": False,
}
html_context = {
    "github_user": "kmlefran",
    "github_repo": "aiida-aimall",
    "github_version": "main",
    "doc_path": "docs/source",
    "default_mode": "dark",
}
html_static_path = ["_static"]

html_sidebars = {
    "**": [
        "navbar-logo.html",
        "navbar-icon-links.html",
        "search-field.html",
        "sbt-sidebar-nav.html",
    ]
}
# If true, an OpenSearch description file will be output, and all pages will
# contain a <link> tag referring to it.  The value of this option must be the
# base URL from which the finished HTML is served.
html_use_opensearch = "http://aiida-aimall.readthedocs.io"
# Language to be used for generating the HTML full-text search index.
# Sphinx supports the following languages:
#   'da', 'de', 'en', 'es', 'fi', 'fr', 'hu', 'it', 'ja'
#   'nl', 'no', 'pt', 'ro', 'ru', 'sv', 'tr'
html_search_language = "en"
# Output file base name for HTML help builder.
htmlhelp_basename = "aiida-quantumespressodoc"
# -------------------------------------------------------------------
# Add any paths that contain custom themes here, relative to this directory.
# ~ html_theme_path = ["."]

# The name of an image file (within the static path) to use as favicon of the
# docs.  This file should be a Windows icon file (.ico) being 16x16 or 32x32
# pixels large.
# html_favicon = "images/favicon.ico"

# Add any paths that contain custom static files (such as style sheets) here,
# relative to this directory. They are copied after the builtin static files,
# so a file named "default.css" will overwrite the builtin "default.css".
# html_static_path = ['_static']

# Add any extra paths that contain custom files (such as robots.txt or
# .htaccess) here, relative to this directory. These files are copied
# directly to the root of the documentation.
# html_extra_path = []

# If not '', a 'Last updated on:' timestamp is inserted at every page bottom,
# using the given strftime format.
# html_last_updated_fmt = '%b %d, %Y'

# If true, SmartyPants will be used to convert quotes and dashes to
# typographically correct entities.
# html_use_smartypants = True

# Custom sidebar templates, maps document names to template names.
# html_sidebars = {}

# Additional templates that should be rendered to pages, maps page names to
# template names.
# html_additional_pages = {}

# If false, no module index is generated.
# html_domain_indices = True

# If false, no index is generated.
# html_use_index = True

# If true, the index is split into individual pages for each letter.
# html_split_index = False

# If true, "Created using Sphinx" is shown in the HTML footer. Default is True.
# html_show_sphinx = True

# If true, "(C) Copyright ..." is shown in the HTML footer. Default is True.
# ~ html_show_copyright = False


# Warnings to ignore when using the -n (nitpicky) option
# We should ignore any python built-in exception, for instance
nitpicky = True

nitpick_ignore_regex = [
    (r"py:.*", r"pydantic.*"),
    (r"py:.*", r"con.*"),
    (r".*", r"Literal.*"),
    (r".*", r"Tuple.*"),
]

nitpick_ignore = [
    ("py:class", "Logger"),
    ("py:class", "CalcJobNode"),
    (
        "py:class",
        "aiida_submission_controller.from_group.FromGroupSubmissionController",
    ),
    ("py:class", "SinglefileData"),
    ("py:class", "Int"),
    ("py:class", "Code"),
    ("py:class", "QbFields"),
    ("py:obj", "aiida_submission_controller.FromGroupSubmissionController"),
]
