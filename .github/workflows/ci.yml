name: ci

on: [push, pull_request]

jobs:
  pre-commit:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
    - uses: actions/checkout@v2
    - name: Set up Python 3.10
      uses: actions/setup-python@v2
      with:
        python-version: "3.10"
    - name: Install python dependencies
      run: |
        pip install --upgrade pip
        pip install -e .[pre-commit,docs,testing]
    - name: Run pre-commit
      run: |
        pre-commit install
        pre-commit run --all-files || ( git status --short ; git diff ; exit 1 )
  integration:

    runs-on: ubuntu-latest

    strategy:
        matrix:
            python-version: ['3.10','3.11']

    services:
        postgres:
            image: postgres:10
            env:
                POSTGRES_HOST: 127.0.0.1
                POSTGRES_USER: postgres
                POSTGRES_PASSWORD: postgres
                POSTGRES_DB: postgres
            ports:
            -   5432:5432
        rabbitmq:
            image: rabbitmq:latest
            ports:
            -   5672:5672

    steps:
    -   uses: actions/checkout@v2

    -   name: Cache Python dependencies
        uses: actions/cache@v1
        with:
            path: ~/.cache/pip
            key: pip-${{ matrix.python-version }}-tests-${{ hashFiles('**/setup.json') }}
            restore-keys:
                pip-${{ matrix.python-version }}-tests

    -   name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
            python-version: ${{ matrix.python-version }}

    -   name: Install Python dependencies
        run: pip install -e .

    -   name: Create AiiDA profile
        run: verdi setup -n --config .github/config/profile.yaml

    -   name: Setup localhost
        run: verdi computer setup -n --config .github/config/localhost-setup.yaml

    -   name: Configure localhost
        run: verdi computer configure core.local localhost -n --config .github/config/localhost-config.yaml

    -   name: Setup `aimqb`
        run: verdi code create core.code.installed -n --config .github/config/code-aim.yaml --filepath-executable /Applications/AIMAll/AIMQB.app/Contents/MacOS/aimqb

    -   name: Setup `g16wfx`
        run: verdi code create core.code.installed -n --config .github/config/code-gwfx.yaml --filepath-executable /Users/chemlab/Desktop/g16/g16

    -   name: Setup groups
        run: verdi group create inp_frag

  tests:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    strategy:
      matrix:
        python-version: ["3.10","3.11"]
        aiida-version: ["stable"]

    services:
      postgres:
        image: postgres:10
      rabbitmq:
        image: rabbitmq:latest
        ports:
          - 5672:5672

    steps:
    - uses: actions/checkout@v2

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install python dependencies
      run: |
        pip install --upgrade pip
        pip install -e .[testing]
        pip install subproptools
        pip install aiida-submission-controller
        pip install group_decomposition

    - name: Run test suite
      env:
        # show timings of tests
        PYTEST_ADDOPTS: --durations=0
        COVERALLS_REPO_TOKEN: ${{ secrets.COVERALLS_REPO_TOKEN }}
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        py.test --cov aiida_aimall --cov-append .
        coveralls --service=github
      #run: pytest -sv tests
    # - name: Upload coverage reports to Codecov
    #   uses: codecov/codecov-action@v3
    #   env:
    #     CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

  docs:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
    - uses: actions/checkout@v2
    - name: Set up Python 3.11
      uses: actions/setup-python@v2
      with:
        python-version: "3.10"
    - name: Install python dependencies
      run: |
        pip install --upgrade pip
        pip install -e .[docs]
        pip install subproptools
        pip install group_decomposition
        pip install pymatgen
    - name: Build docs
      run: cd docs && make
